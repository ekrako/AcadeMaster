# Firebase Hosting deployment workflow
name: Deploy to Firebase Hosting on merge
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'live'
        type: choice
        options:
        - live
        - preview
      channel_id:
        description: 'Preview channel ID (only for preview deployments)'
        required: false
        default: 'manual-deploy'
        type: string
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
      - name: Deploy to Firebase Hosting
        run: |
          npm install -g firebase-tools
          
          # Determine deployment type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.target }}" = "preview" ]; then
            DEPLOY_TYPE="preview"
            CHANNEL_ID="${{ github.event.inputs.channel_id }}"
            echo "üîç Manual preview deployment to channel: $CHANNEL_ID"
          else
            DEPLOY_TYPE="live"
            echo "üöÄ Live deployment to production"
          fi
          
          # Check if we have service account credentials
          if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
            echo "‚úÖ Using service account authentication"
            echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > $HOME/gcp-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json
            
            if [ "$DEPLOY_TYPE" = "live" ]; then
              firebase deploy --only hosting --project academaster-1
              echo "‚úÖ Deployed to: https://academaster-1.web.app"
            else
              firebase hosting:channel:deploy $CHANNEL_ID --project academaster-1
              echo "‚úÖ Deployed to preview channel: $CHANNEL_ID"
            fi
            
          else
            echo "‚ùå Service account credentials not found."
            echo "Please set up the GOOGLE_APPLICATION_CREDENTIALS_JSON secret in GitHub repository settings."
            echo ""
            echo "üìã Setup instructions:"
            echo "   1. Go to: https://console.firebase.google.com/project/academaster-1/settings/serviceaccounts/adminsdk"
            echo "   2. Generate a new private key"
            echo "   3. Add the JSON content as GOOGLE_APPLICATION_CREDENTIALS_JSON secret"
            echo "   4. Or run: ./add-service-account-secret.sh path/to/service-account.json"
            exit 1
          fi
          
          echo "üéâ Deployment completed!"
          echo "üìã Deployment details:"
          echo "   ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "   ‚Ä¢ Type: $DEPLOY_TYPE"
          echo "   ‚Ä¢ Commit: ${{ github.sha }}"
          if [ "$DEPLOY_TYPE" = "preview" ]; then
            echo "   ‚Ä¢ Channel: $CHANNEL_ID"
          fi
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
