# Firebase Hosting preview deployment workflow
name: Deploy to Firebase Hosting on PR
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy (leave empty to use current branch)'
        required: false
        type: string
      channel_id:
        description: 'Preview channel ID'
        required: false
        default: 'pr-preview'
        type: string
permissions:
  checks: write
  contents: read
  pull-requests: write
jobs:
  build_and_preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
      - name: Create preview deployment
        run: |
          npm install -g firebase-tools
          
          # Determine channel ID
          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            CHANNEL_ID="pr-${{ github.event.inputs.pr_number }}"
            echo "üîç Deploying preview for PR #${{ github.event.inputs.pr_number }}"
          elif [ -n "${{ github.event.inputs.channel_id }}" ]; then
            CHANNEL_ID="${{ github.event.inputs.channel_id }}"
            echo "üîç Deploying to custom channel: $CHANNEL_ID"
          else
            CHANNEL_ID="branch-$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9-]/-/g')"
            echo "üîç Deploying preview for branch: ${{ github.ref_name }}"
          fi
          
          # Check if we have service account credentials
          if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
            echo "‚úÖ Using service account authentication"
            echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > $HOME/gcp-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp-key.json
            firebase hosting:channel:deploy $CHANNEL_ID --project academaster-1
          else
            echo "‚ùå Service account credentials not found."
            echo "Please set up the GOOGLE_APPLICATION_CREDENTIALS_JSON secret in GitHub repository settings."
            echo ""
            echo "üìã Setup instructions:"
            echo "   1. Go to: https://console.firebase.google.com/project/academaster-1/settings/serviceaccounts/adminsdk"
            echo "   2. Generate a new private key"
            echo "   3. Add the JSON content as GOOGLE_APPLICATION_CREDENTIALS_JSON secret"
            echo "   4. Or run: ./add-service-account-secret.sh path/to/service-account.json"
            exit 1
          fi
          
          echo "‚úÖ Preview deployment completed!"
          echo "üìã Deployment details:"
          echo "   ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "   ‚Ä¢ Channel: $CHANNEL_ID"
          echo "   ‚Ä¢ Commit: ${{ github.sha }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
